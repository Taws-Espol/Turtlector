#!/usr/bin/env python3
"""
Script de ejemplo para probar el servicio Gemini AI
Este script demuestra c√≥mo usar el servicio desde c√≥digo Python
"""

import sys
import os
from pathlib import Path

# Agregar el directorio padre al path para importar la app
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.gemini_service import analyze_image_with_gemini, check_gemini_health

def test_gemini_health():
    """Prueba el health check del servicio Gemini"""
    print("üîç Verificando estado del servicio Gemini...")
    
    health = check_gemini_health()
    print(f"Estado: {health['status']}")
    
    if health['status'] == 'healthy':
        print("‚úÖ Servicio Gemini funcionando correctamente")
        print(f"   - Modelo: {health['details']['model']}")
        print(f"   - Formatos soportados: {', '.join(health['details']['supported_formats'])}")
        print(f"   - API Key configurada: {health['details']['api_key_configured']}")
        return True
    else:
        print(f"‚ùå Servicio Gemini no disponible: {health['details'].get('error', 'Error desconocido')}")
        return False

def create_sample_image():
    """Crea una imagen de ejemplo simple para pruebas"""
    try:
        from PIL import Image, ImageDraw, ImageFont
        import tempfile
        
        # Crear una imagen simple con texto
        img = Image.new('RGB', (400, 300), color='lightblue')
        draw = ImageDraw.Draw(img)
        
        # Agregar texto
        text = "LABORATORIO DE QU√çMICA\nESPOL\n\nEquipos:\n‚Ä¢ Microscopio\n‚Ä¢ Balanza\n‚Ä¢ Reactivos"
        draw.text((20, 20), text, fill='black')
        
        # Guardar en archivo temporal
        temp_file = tempfile.NamedTemporaryFile(suffix='.png', delete=False)
        img.save(temp_file.name)
        return temp_file.name
        
    except ImportError:
        print("‚ö†Ô∏è  PIL no disponible. No se puede crear imagen de ejemplo.")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è  Error creando imagen de ejemplo: {e}")
        return None

def test_image_analysis(image_path=None):
    """Prueba el an√°lisis de imagen"""
    print("\nüñºÔ∏è  Probando an√°lisis de imagen...")
    
    # Si no se proporciona imagen, crear una de ejemplo
    if not image_path:
        print("No se proporcion√≥ imagen. Creando imagen de ejemplo...")
        image_path = create_sample_image()
        
    if not image_path or not os.path.exists(image_path):
        print("‚ùå No se puede proceder sin una imagen v√°lida")
        return False
        
    # Prompt de ejemplo para an√°lisis educativo
    prompt = """
    Analiza esta imagen y determina:
    1. ¬øQu√© tipo de entorno o equipamiento se muestra?
    2. ¬øQu√© carreras universitarias de ESPOL se relacionan mejor con esto?
    3. ¬øQu√© habilidades espec√≠ficas se desarrollar√≠an en este contexto?
    
    Proporciona recomendaciones concretas de 2-3 carreras de ESPOL.
    """
    
    print(f"üìÅ Analizando archivo: {Path(image_path).name}")
    print(f"üìù Prompt: {prompt.strip()[:100]}...")
    
    # Ejecutar an√°lisis
    result = analyze_image_with_gemini(image_path, prompt)
    
    # Mostrar resultados
    if result["success"]:
        print("‚úÖ An√°lisis completado exitosamente")
        print("\nüìä Resultado del an√°lisis:")
        print("-" * 50)
        print(result["analysis"])
        print("-" * 50)
        
        # Mostrar metadatos
        if result["metadata"]:
            print("\nüìã Metadatos:")
            metadata = result["metadata"]
            for key, value in metadata.items():
                if key == "image_size" and value:
                    print(f"   ‚Ä¢ Tama√±o de imagen: {value[0]} x {value[1]} p√≠xeles")
                elif key == "file_size" and value:
                    print(f"   ‚Ä¢ Tama√±o de archivo: {value:,} bytes")
                elif key == "image_format" and value:
                    print(f"   ‚Ä¢ Formato: {value}")
                elif key == "model":
                    print(f"   ‚Ä¢ Modelo: {value}")
                elif key == "prompt_length":
                    print(f"   ‚Ä¢ Longitud del prompt: {value} caracteres")
        
        return True
    else:
        print(f"‚ùå Error en el an√°lisis: {result['error']}")
        print(f"   C√≥digo de error: {result['error_code']}")
        return False

def main():
    """Funci√≥n principal que ejecuta las pruebas"""
    print("üê¢ Turtlector - Prueba del Servicio Gemini AI")
    print("=" * 50)
    
    # Verificar health check
    if not test_gemini_health():
        print("\n‚ö†Ô∏è  Servicio no disponible. Verifica:")
        print("   1. Variable GEMINI_API_KEY en .env")
        print("   2. Conexi√≥n a internet")
        print("   3. Validez de la API key")
        return False
    
    # Obtener imagen de los argumentos o usar imagen de ejemplo
    image_path = None
    if len(sys.argv) > 1:
        image_path = sys.argv[1]
        if not os.path.exists(image_path):
            print(f"‚ö†Ô∏è  Archivo no encontrado: {image_path}")
            image_path = None
    
    # Ejecutar an√°lisis de imagen
    success = test_image_analysis(image_path)
    
    # Limpiar archivo temporal si se cre√≥
    if image_path and "tmp" in image_path:
        try:
            os.unlink(image_path)
        except:
            pass
    
    if success:
        print("\nüéâ Todas las pruebas completadas exitosamente!")
        return True
    else:
        print("\n‚ùå Algunas pruebas fallaron")
        return False

if __name__ == "__main__":
    print("Uso:")
    print("  python test_gemini_service.py")
    print("  python test_gemini_service.py /ruta/a/imagen.jpg")
    print()
    
    success = main()
    sys.exit(0 if success else 1)