version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: turtlector-backend
    ports:
      - "8000:8000"
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY:-your_gemini_api_key_here}
      - WHISPER_MODEL=${WHISPER_MODEL:-base}
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:80,http://frontend
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/.env:/app/.env:ro
    networks:
      - turtlector-network
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: turtlector-frontend
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - NODE_ENV=production
    networks:
      - turtlector-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis service for caching and session management
  redis:
    image: redis:7-alpine
    container_name: turtlector-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - turtlector-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

# Networks
networks:
  turtlector-network:
    driver: bridge
    name: turtlector-network

# Volumes
volumes:
  redis_data:
    driver: local
    name: turtlector-redis-data